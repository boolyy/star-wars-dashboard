{"version":3,"sources":["Components/SearchResultCard.js","Components/SearchResultDisplay.js","Components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["SearchResultCard","props","useState","homeWorld","setHomeWorld","films","setFilms","species","setSpecies","starships","setStarships","vehicles","setVehicles","createStringFromArray","array","typeOfArray","a","filmString","map","url","fetch","res","json","data","title","length","speciesString","name","starshipsString","vehiclesString","homeWorldURL","searchResultCard","homeworld","homeWorldRes","homeWorldData","useEffect","updateExtras","className","birth_year","eye_color","gender","hair_color","height","mass","skin_color","SearchResultDisplay","searchResult","count","results","result","Dashboard","state","loading","search","userSearchedOnce","handleChange","bind","this","setState","searchURL","event","target","value","createSearchResult","type","id","onChange","style","width","role","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eceb71e4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n//<SearchResultCard searchResultCard = result>\r\n//This will take a result annd give\r\n\r\n/*  -name\r\n    -birth_year\r\n    -eye_color\r\n    -gender\r\n    -hair_color\r\n    -height\r\n    -mass\r\n    -skin_color\r\n    -homeworld - this will be a url\r\n    -films - this will be a url array\r\n    -species - array\r\n    -starships - array\r\n    -vehicles - array */\r\n\r\nexport default function SearchResultCard(props) {\r\n  //adding hook\r\n  const [homeWorld, setHomeWorld] = useState(\"\");\r\n  const [films, setFilms] = useState(\"\");\r\n  const [species, setSpecies] = useState(\"\");\r\n  const [starships, setStarships] = useState(\"\");\r\n  const [vehicles, setVehicles] = useState(\"\");\r\n\r\n  //typeOfArray can be \"films\", \"species\", \"starships\", \"vehicles\"\r\n  async function createStringFromArray(array, typeOfArray) {\r\n    //put array of urls in here\r\n    if (typeOfArray == \"films\") {\r\n      let res;\r\n      let data;\r\n      let filmString = \"\";\r\n      array.map(async (url) => {\r\n        res = await fetch(url);\r\n        data = await res.json();\r\n        if (filmString === \"\") {\r\n          filmString = await data.title;\r\n        } else {\r\n          filmString = filmString + \", \" + (await data.title);\r\n        }\r\n        setFilms(filmString);\r\n      });\r\n    } else if (typeOfArray == \"species\") {\r\n      if (array.length) {\r\n        let res;\r\n        let data;\r\n        let speciesString = \"\";\r\n        array.map(async (url) => {\r\n          res = await fetch(url);\r\n          data = await res.json();\r\n          if (speciesString === \"\") {\r\n            speciesString = await data.name;\r\n          } else {\r\n            speciesString = speciesString + \", \" + (await data.name);\r\n          }\r\n          setSpecies(speciesString);\r\n        });\r\n      }\r\n    } else if (typeOfArray == \"starships\") {\r\n      if (array.length) {\r\n        let res;\r\n        let data;\r\n        let starshipsString = \"\";\r\n        array.map(async (url) => {\r\n          res = await fetch(url);\r\n          data = await res.json();\r\n          if (starshipsString === \"\") {\r\n            starshipsString = await data.name;\r\n          } else {\r\n            starshipsString = starshipsString + \", \" + (await data.name);\r\n          }\r\n          setStarships(starshipsString);\r\n        });\r\n      }\r\n    } else if (typeOfArray == \"vehicles\") {\r\n      if (array.length) {\r\n        let res;\r\n        let data;\r\n        let vehiclesString = \"\";\r\n        array.map(async (url) => {\r\n          res = await fetch(url);\r\n          data = await res.json();\r\n          if (vehiclesString === \"\") {\r\n            vehiclesString = await data.name;\r\n          } else {\r\n            vehiclesString = vehiclesString + \", \" + (await data.name);\r\n          }\r\n          setVehicles(vehiclesString);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  //similar to componentDidMount apparently\r\n  useEffect(() => {\r\n    updateExtras();\r\n  }, []); //with empty array, this will only run once\r\n\r\n  //typeOfArray can be \"films\", \"species\", \"starships\", \"vehicles\"\r\n  async function updateExtras() {\r\n    //update homeworld\r\n    //homeworld url will be in props\r\n    const homeWorldURL = props.searchResultCard.homeworld;\r\n    const homeWorldRes = await fetch(homeWorldURL);\r\n    const homeWorldData = await homeWorldRes.json();\r\n    setHomeWorld(await homeWorldData.name);\r\n\r\n    createStringFromArray(props.searchResultCard.films, \"films\");\r\n    createStringFromArray(props.searchResultCard.species, \"species\");\r\n    createStringFromArray(props.searchResultCard.starships, \"starships\");\r\n    createStringFromArray(props.searchResultCard.vehicles, \"vehicles\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"card text-white bg-warning mb-3 m-3\">\r\n      <div className=\"card-header\">\r\n        <h4>{props.searchResultCard.name}</h4>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{\"Film Appearances: \" + films}</h5>\r\n        <h5 className=\"card-title\">\r\n          {\"Birth Year: \" + props.searchResultCard.birth_year}\r\n        </h5>\r\n        <h5 className=\"card-title\">{\"Home World: \" + homeWorld}</h5>\r\n        <div>\r\n          {props.searchResultCard.species.length ? (\r\n            <h5 className=\"card-title\">{\"Species: \" + species}</h5>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <h5 className=\"card-title\">\r\n          {\"Eye Color: \" + props.searchResultCard.eye_color}\r\n        </h5>\r\n        <h5 className=\"card-title\">\r\n          {\"Gender: \" + props.searchResultCard.gender}\r\n        </h5>\r\n        <h5 className=\"card-title\">\r\n          {\"Hair Color: \" + props.searchResultCard.hair_color}\r\n        </h5>\r\n        <h5 className=\"card-title\">\r\n          {\"Height: \" + props.searchResultCard.height + \" cm\"}\r\n        </h5>\r\n        <h5 className=\"card-title\">\r\n          {\"Mass: \" + props.searchResultCard.mass + \" kg\"}\r\n        </h5>\r\n        <h5 className=\"card-title\">\r\n          {\"Skin Color: \" + props.searchResultCard.skin_color}\r\n        </h5>\r\n        <div>\r\n          {props.searchResultCard.starships.length ? (\r\n            <h5 className=\"card-title\">{\"Starships: \" + starships}</h5>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div>\r\n          {props.searchResultCard.vehicles.length ? (\r\n            <h5 className=\"card-title\">{\"Vehicles: \" + vehicles}</h5>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SearchResultCard from \"./SearchResultCard\";\r\n\r\n//might be able to get away a\r\n//<SearchResultDisplay searchResult=this.state.searchResult>\r\nexport default function SearchResultDisplay(props) {\r\n  //the props to be passed here are search results\r\n\r\n  //no search results found\r\n  if (props.searchResult.count == 0) {\r\n    return <h2 className=\"NoResult\">No results found</h2>;\r\n  }\r\n\r\n  //one search result found\r\n  if (props.searchResult.count == 1) {\r\n    return (\r\n      <div>\r\n        {/*  -name\r\n    -birth_year\r\n    -eye_color\r\n    -gender\r\n    -hair_color\r\n    -height\r\n    -mass\r\n    -skin_color\r\n    -homeworld - this will be a url\r\n    -films - this will be a url array\r\n    -species - array\r\n    -starships - array\r\n    -vehicles - array */}\r\n        <SearchResultCard searchResultCard={props.searchResult.results[0]} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //if search result found, display list of possible people\r\n  return (\r\n    <div className=\"container\">\r\n      {props.searchResult.results.map((result) => (\r\n        <div>\r\n          <SearchResultCard searchResultCard={result} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SearchResultDisplay from \"./SearchResultDisplay\";\r\n\r\nexport default class Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchResult: {},\r\n      loading: true,\r\n      search: \"\", //this is what the user types in the search bar\r\n      userSearchedOnce: false, //if user hasn't searched once then post some instructions\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  /* async componentDidMount() {\r\n    const baseURL = \"https://swapi.dev/api/people/?search=\"; //this is the base url used by SWAPI\r\n    const searchURL = baseURL + this.state.search;\r\n    const res = await fetch(searchURL);\r\n    const data = await res.json();\r\n    this.setState({ searchResult: data, loading: false }); //assigns the whole response array to searchResult\r\n  } */\r\n\r\n  /* \r\n  This needs a search bar, User can search and a list of people will show.\r\n  They can choose one. If search does not return anything, then it will say no result found\r\n  */\r\n\r\n  //create method for populating search Result\r\n  async createSearchResult(search) {\r\n    if (search === \"\") {\r\n      this.setState({ searchResult: \"\", loading: false }); //assigns the whole response array to searchResult\r\n    } else {\r\n      const baseURL = \"https://swapi.dev/api/people/?search=\"; //this is the base url used by SWAPI\r\n      const searchURL = baseURL + search;\r\n      const res = await fetch(searchURL);\r\n      const data = await res.json();\r\n      this.setState({ searchResult: data, loading: false }); //assigns the whole response array to searchResult\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ search: event.target.value, userSearchedOnce: true });\r\n    this.createSearchResult(this.state.search);\r\n  }\r\n  /* \r\n    Person Object returns these properties that I will use\r\n    -name\r\n    -birth_year\r\n    -eye_color\r\n    -gender\r\n    -hair_color\r\n    -height\r\n    -mass\r\n    -skin_color\r\n    -homeworld - this will be a url\r\n    -films - this will be a url array\r\n    -species - array\r\n    -starships - array\r\n    -vehicles - array\r\n*/\r\n\r\n  render() {\r\n    //create result where it says no results found\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"yellow Center m-4\">Star Wars Character Database</h1>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"exampleInputEmail1\"\r\n          value={this.state.search}\r\n          onChange={this.handleChange}\r\n        />\r\n        <div className=\"Center\">\r\n          {!this.state.userSearchedOnce ? (\r\n            <h2 className=\"yellow m-3\">\r\n              Type in the name of a character for some info on them!\r\n            </h2>\r\n          ) : this.state.loading || !this.state.searchResult ? (\r\n            <div\r\n              className=\"spinner-border text-light m-4\"\r\n              style={{ width: 3 + \"em\", height: 3 + \"em\" }}\r\n              role=\"status\"\r\n            >\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <SearchResultDisplay searchResult={this.state.searchResult} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Dashboard from \"./Components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"whole\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}